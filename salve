import dotenv from "dotenv";
dotenv.config();

import express from "express";
import cors from "cors";

// üëá ADICIONE estas 3 linhas:
import path from "path";
import fs from "fs";
import { fileURLToPath } from "url";
import { resolveCadastrosDir, } from "./src/paths.js";
// ---------------------------------

import { startWatcher } from "./utils/watcher.js";
import { startRelatorioWatcher } from "./utils/relatorioWatcher.js";
import { buscarVendedorPorEmail } from "./services/vendedorService.js";
import { enviarNotificacaoWhatsApp } from "./services/notificacaoService.js";
import { transferSaleByProtocolo, findSaleByProtocolo } from "./src/transferSale.js";

// üëá agora pode usar
const __filename = fileURLToPath(import.meta.url);
const __dirname  = path.dirname(__filename);
const CADASTROS_DIR_DEBUG = path.join(__dirname, "data", "cadastros");



// Start watchers
console.log("üöÄ Servidor de notifica√ß√£o iniciado...");
startWatcher();
startRelatorioWatcher();

// Express API
const app = express();
app.use(express.json());
app.use(cors());



app.get("/api/vendas/debug-cadastros", (req, res) => {
  try {
    const dir = resolveCadastrosDir();
    const exists = fs.existsSync(dir);
    const files = exists ? fs.readdirSync(dir).filter(f => f.endsWith(".json")) : [];
    res.json({ dir, exists, files });
  } catch (e) {
    res.status(500).json({ ok:false, error: e.message });
  }
});


// tempor√°rio: em app.js
app.get('/__debug/routes', (req, res) => {
  const list = [];
  app._router.stack.forEach((m) => {
    if (m.route) {
      const methods = Object.keys(m.route.methods).join(',').toUpperCase();
      list.push({ path: m.route.path, methods });
    } else if (m.name === 'router' && m.handle.stack) {
      m.handle.stack.forEach(r => {
        const route = r.route;
        if (route) {
          const methods = Object.keys(route.methods).join(',').toUpperCase();
          list.push({ path: route.path, methods, prefix: m.regexp?.toString() });
        }
      });
    }
  });
  res.json(list);
});





app.post("/notificar-status", async (req, res) => {
    const { email, status, cliente, plano, protocolo, motivo } = req.body;
  
    if (!email || !status || !cliente) {
      return res.status(400).json({ error: "Campos obrigat√≥rios: email, status, cliente" });
    }
  
    try {
      const vendedor = await buscarVendedorPorEmail(email);
  
      if (!vendedor || vendedor.ReceberNotifica√ß√£o !== "True") {
        return res.status(404).json({ error: "Vendedor n√£o encontrado ou notifica√ß√µes desativadas" });
      }
  
      const emoji = status === "Autorizada" ? "‚úÖ" : "‚ùå";
      const textoStatus = status === "Autorizada" ? "AUTORIZADA" : "NEGADA";
  
      const mensagem = `${emoji} *Venda ${textoStatus}*
  
  üë§ Cliente: ${cliente}
  üì¶ Plano: ${plano || "N√£o informado"}
  üßæ Protocolo: ${protocolo || "N/A"}
  ${motivo ? `üìå Motivo: ${motivo}` : ""}
  
  Verifique seu painel para mais detalhes.`;
  
      await enviarNotificacaoWhatsApp(vendedor.telefone, mensagem);
      console.log(`üì≤ Notifica√ß√£o de "${status}" enviada para ${vendedor.nome}`);
      return res.json({ success: true });
    } catch (err) {
      console.error("‚ùå Erro ao enviar notifica√ß√£o:", err.message);
      return res.status(500).json({ error: "Erro interno ao enviar notifica√ß√£o" });
    }
  });


app.post("/notificar-indicacao", async (req, res) => {
    const { email, indicador, nomeIndicado, telefoneIndicado } = req.body;
  
    if (!email || !indicador || !nomeIndicado || !telefoneIndicado) {
      return res.status(400).json({ error: "Campos obrigat√≥rios: email, indicador, nomeIndicado, telefoneIndicado" });
    }
  
    try {
      const vendedor = await buscarVendedorPorEmail(email);
  
      if (!vendedor || vendedor.ReceberNotifica√ß√£o !== "True") {
        return res.status(404).json({ error: "Vendedor n√£o encontrado ou notifica√ß√µes desativadas" });
      }
  
      const mensagem = `
  üì© *Nova Indica√ß√£o Recebida*
  
  üë§ *Nome do indicado:* ${nomeIndicado}
  üìû *Telefone do indicado:* ${telefoneIndicado}
  üôã *Indicado por:* ${indicador}
  
  üîé Mais informa√ß√µes est√£o dispon√≠veis no seu painel de vendas.
      `;
  
      await enviarNotificacaoWhatsApp(vendedor.telefone, mensagem);
      console.log(`üì≤ Indica√ß√£o notificada para ${vendedor.nome}`);
      return res.json({ success: true });
    } catch (err) {
      console.error("‚ùå Erro ao enviar notifica√ß√£o de indica√ß√£o:", err.message);
      return res.status(500).json({ error: "Erro interno ao enviar notifica√ß√£o de indica√ß√£o" });
    }
  });
  
// üëÄ GET para localizar a venda
// GET /api/vendas/localizar?protocolo=MX-20250401-171147-5531
app.get('/api/vendas/localizar', (req, res) => {
  try {
    const { protocolo } = req.query;
    if (!protocolo) return res.status(400).json({ ok: false, error: 'protocolo √© obrigat√≥rio' });
    const found = findSaleByProtocolo(protocolo);
    if (!found) return res.status(404).json({ ok: false, error: 'Venda n√£o localizada em nenhum arquivo.' });
    return res.json({
      ok: true,
      file: path.basename(found.file),
      index: found.index,
      venda: found.venda
    });
  } catch (e) {
    return res.status(500).json({ ok: false, error: e.message });
  }
});

// üöö POST para transferir (from √© opcional agora)
app.post('/api/vendas/transferir-basico', (req, res) => {
  try {
    const { protocolo, from, to } = req.body;
    const result = transferSaleByProtocolo({ protocolo, from, to });
    return res.json(result);
  } catch (e) {
    return res.status(400).json({ ok: false, error: e.message });
  }
});

  

const PORT = process.env.PORT || 10004;
app.listen(PORT, () => {
  console.log(`üåê API escutando em http://localhost:${PORT}`);
});








// src/transferSale.js (ESM)
import fs from "fs";
import path from "path";
import { resolveCadastrosDir } from "./paths.js";

const CADASTROS_DIR = resolveCadastrosDir(); // <- autom√°tico

const emailToFilePart = (email) => String(email).trim().toLowerCase().replace(/[@.]/g, "_");
const nameToFilePart  = (name)  => String(name).trim().toLowerCase().replace(/\s+/g, "_");
const fileForVendor   = (name, email) => path.join(CADASTROS_DIR, `${nameToFilePart(name)}__${emailToFilePart(email)}.json`);

const loadJson = (file) => (fs.existsSync(file) ? JSON.parse(fs.readFileSync(file, "utf8") || "[]") : []);
const saveJson = (file, data) => {
  fs.mkdirSync(path.dirname(file), { recursive: true });
  fs.writeFileSync(file, JSON.stringify(data, null, 2), "utf8");
};

// Varrer todos os arquivos
export function findSaleByProtocolo(protocolo) {
  const files = fs.readdirSync(CADASTROS_DIR).filter(f => f.endsWith(".json"));
  for (const fname of files) {
    const fpath = path.join(CADASTROS_DIR, fname);
    const arr = loadJson(fpath);
    const index = arr.findIndex(v => String(v.protocolo).trim() === String(protocolo).trim());
    if (index !== -1) return { file: fpath, venda: arr[index], index };
  }
  return null;
}

export function transferSaleByProtocolo({ protocolo, from, to }) {
  if (!protocolo) throw new Error("protocolo √© obrigat√≥rio");
  if (!to?.email || !to?.nome) throw new Error("to.nome e to.email s√£o obrigat√≥rios");

  // tenta direto pelo 'from' (se informado), sen√£o descobre sozinho
  let origemFile, origemArr, idx, vendaOrig;
  if (from?.nome && from?.email) {
    const fromFile = fileForVendor(from.nome, from.email);
    if (fs.existsSync(fromFile)) {
      const arr = loadJson(fromFile);
      const i = arr.findIndex(v => String(v.protocolo).trim() === String(protocolo).trim());
      if (i !== -1) {
        origemFile = fromFile; origemArr = arr; idx = i; vendaOrig = arr[i];
      }
    }
  }
  if (!vendaOrig) {
    const found = findSaleByProtocolo(protocolo);
    if (!found) throw new Error(`Venda ${protocolo} n√£o localizada em ${CADASTROS_DIR}`);
    origemFile = found.file; origemArr = loadJson(origemFile); idx = found.index; vendaOrig = found.venda;
  }

  const toFile = fileForVendor(to.nome, to.email);
  const vendaAtualizada = { ...vendaOrig, vendedor: to.nome, vendedorEmail: to.email };

  origemArr.splice(idx, 1);
  saveJson(origemFile, origemArr);

  const destinoArr = loadJson(toFile);
  destinoArr.push(vendaAtualizada);
  saveJson(toFile, destinoArr);

  return {
    ok: true,
    protocolo,
    fromFile: path.basename(origemFile),
    toFile: path.basename(toFile),
  };
}
